(define (smush str op)
	(define (subsmush str op prev index)
		(define value (op prev (stream-car str)))
		(cons-stream index (cons-stream (stream-car str) (cons-stream value (subsmush (stream-cdr str) op value (+ index 1)))))
	)
	(cons-stream 0 (cons-stream (stream-car str) (cons-stream (stream-car str) (subsmush (stream-cdr str) op (stream-car str) 1))))
)

(define (sdisplay n str)
	(define (iter i str)
		(if (= n i)
			(print "...)")
			(begin
				(print (stream-car str) ",")
				(iter (+ i 1) (stream-cdr str))
			)
		)
	)
	(print "(")
	(iter 0 str)
)

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (iter (readExpr))
)