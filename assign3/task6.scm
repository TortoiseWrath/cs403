(define (quad a b c s)
	(define (quad-stream x)
		(cons-stream (+ (* a x x) (* b x) c) (quad-stream (+ x s)))
	)
	(quad-stream 0.0)
)

(define (integrate st step)
	(define (zoid-stream str prev acc)
		(define value (+ acc (* 0.5 step (+ prev (stream-car str)))))
		(cons-stream value (zoid-stream (stream-cdr str) (stream-car str) value))
	)
	(cons-stream 0.0 (zoid-stream (stream-cdr st) (stream-car st) 0.0))
)

(define (derivate st step c)
	(define (zoid-stream str prev acc)
		(define value (- (/ (- (stream-car str) acc) (* 0.5 step)) prev))
		(cons-stream value (zoid-stream (stream-cdr str) value (stream-car str)))
	)
	(cons-stream (* 1.0 c) (zoid-stream (stream-cdr st) c (stream-car st)))
)

(define (same-stream? s1 s2 n t)
	(define (iter st1 st2 i state)
		(if (or (= i n) (not state))
			state
			(iter (stream-cdr st1) (stream-cdr st2) (+ i 1) (< (abs (- (stream-car st1) (stream-car st2))) t))
		)
	)
	(iter s1 s2 0 #t)
)

(define (sdisplay n str)
	(define (iter i str)
		(if (= n i)
			(print "...)")
			(begin
				(print (stream-car str) ",")
				(iter (+ i 1) (stream-cdr str))
			)
		)
	)
	(print "(")
	(iter 0 str)
)

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (iter (readExpr))
)