(include "queue.scm")
(include "gates.scm")
(include "nand.scm")

(define the-agenda (make-agenda))

(define (inverter a z)
	(nand-gate a a z)
)

(define (and-gate a b z)
	(let ((x (make-wire)))
		(nand-gate a b x)
		(inverter x z)
	)
)

(define (or-gate a b z)
	(let ((x (make-wire)) (y (make-wire)))
		(inverter a x)
		(inverter b y)
		(nand-gate x y z)
	)
)

(define (nor-gate a b z)
	(let ((x (make-wire)))
		(or-gate a b x)
		(inverter x z)
	)
)

(define (xor-gate a b z)
	(let ((x (make-wire)) (y (make-wire)) (c (make-wire)))
		(nand-gate a b x)
		(nand-gate a x y)
		(nand-gate b x c)
		(nand-gate y c z)
	)
)

(define (xnor-gate a b z)
	(let ((x (make-wire)) (y (make-wire)))
		(or-gate a b x)
		(nand-gate a b y)
		(nand-gate x y z)
	)
)

(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (iter (readExpr))
)